<?xml version="1.0"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           verticalScrollPolicy="off" horizontalScrollPolicy="off"
           creationComplete="onCreationComplete()">
    <mx:Script><![CDATA[
        import com.stockholdergame.client.ui.components.chart.chartClasses.ChartPointData;
        import com.stockholdergame.client.util.style.StkColorUtil;

        import mx.collections.ArrayCollection;
        import mx.controls.Label;

        [Bindable]
        public var chartData:ArrayCollection;

        public var legend:ArrayCollection;

        public var padding:int = 50;

        public var textGap:int = 4;

        public var legendItemHeight:int = 20;

        public var legendHorizontalPadding:int = 30;

        public var legendSize:int = 20;

        public var legendPosition:String = "left-in"; // bottom-under

        public var colors:Array = StkColorUtil.moveOrderColorMapping.toArray();

        private function onCreationComplete():void {
            drawLines();
        }

        private function drawLines():void {
            this.graphics.clear();

            var componentHeight:int = this.height;
            var componentWidth:int = this.width;
            var actualHeight:Number = componentHeight - (2 * padding);
            var actualWidth:Number = componentWidth - (2 * padding);

            this.graphics.beginFill(StyleManager.getColorName("#FFFEF3"));
            this.graphics.drawRect(0, 0, componentWidth, componentHeight);
            this.graphics.endFill();

            if (chartData == null || chartData.length == 0) {
                return;
            }

            var maxTotalValue:Number = getMaxValue(chartData);
            var minTotalValue:Number = getMinValue(chartData);
            var verticalScale:Number = actualHeight / (maxTotalValue - minTotalValue);
            var horizontalStep:Number = actualWidth / (chartData.length - 1);

            // axis
            this.graphics.lineStyle(2, StyleManager.getColorName("#7E7A53"));
            this.graphics.moveTo(padding, padding);
            this.graphics.lineTo(padding, actualHeight + padding);

            this.graphics.moveTo(padding, (maxTotalValue * verticalScale) + padding);
            this.graphics.lineTo(actualWidth + padding, (maxTotalValue * verticalScale) + padding);

            for (var n:int = 0; n < chartData.length - 1; n++) {
                var x1:Number = n * horizontalStep + padding;
                this.graphics.lineStyle(0, 0, 0.0);
                this.graphics.beginFill(StyleManager.getColorName(n % 2 == 0 ? "#FFFEF3" : "#F0EEDC"), 0.5);
                this.graphics.drawRect(x1, padding, horizontalStep, (maxTotalValue * verticalScale));
                this.graphics.endFill();
            }

            // legend
            var label:Label;
            var k:int = 0;
            var legendLabelPointX:int = 0;
            for each (var description:String in legend) {
                this.graphics.lineStyle(2, StyleManager.getColorName(colors[k]));
                if (legendPosition == "left-in") {
                    this.graphics.moveTo(padding + legendHorizontalPadding, padding + (legendItemHeight / 2) + (legendItemHeight * k));
                    this.graphics.lineTo(padding + legendHorizontalPadding + legendSize, padding + (legendItemHeight / 2) + (legendItemHeight * k));
                } else if (legendPosition == "bottom-under") {
                    this.graphics.moveTo(legendLabelPointX + padding, componentHeight - (padding / 2));
                    this.graphics.lineTo(legendLabelPointX + padding + legendSize, componentHeight - (padding / 2));
                }

                label = new Label();
                label.text = description;
                label.regenerateStyleCache(false);
                label.setStyle("color", StyleManager.getColorName("blue"));
                var measure:TextLineMetrics = label.measureText(label.text);
                if (legendPosition == "left-in") {
                    label.x = padding + legendHorizontalPadding + legendSize + textGap;
                    label.y = padding + (legendItemHeight * k);
                } else if (legendPosition == "bottom-under") {
                    label.x = legendLabelPointX + padding + legendSize + textGap;
                    label.y = componentHeight - (padding / 2) - (measure.height * (2 / 3));
                }
                legendLabelPointX = label.x + measure.width;
                addChild(label);
                k++;
            }

            var count:int = ChartPointData(chartData.getItemAt(0)).values.length;
            for (var i:int = 0; i < count; i++) {
                var j:int = 0;
                for each (var chartPointData:ChartPointData in chartData) {
                    var points:Array = chartPointData.values;
                    var point:Number = points[i];
                    var x:Number = j * horizontalStep + padding;
                    var y:Number = (maxTotalValue * verticalScale) - (point * verticalScale) + padding;

                    if (j == 0) {
                        this.graphics.lineStyle(2, StyleManager.getColorName(colors[i]));
                        this.graphics.moveTo(x, y);
                    } else {
                        this.graphics.lineTo(x, y);
                    }
                    j++;
                }
            }
        }

        private static function getMinValue(chartData:ArrayCollection):Number {
            var value:Number = 0;
            for each (var chartPointData:ChartPointData in chartData) {
                var points:Array = chartPointData.values;
                for each (var point:Number in points) {
                    if (point <= value) {
                        value = point;
                    }
                }
            }
            return value;
        }

        private static function getMaxValue(chartData:ArrayCollection):Number {
            var value:Number = 0;
            for each (var chartPointData:ChartPointData in chartData) {
                var points:Array = chartPointData.values;
                for each (var point:Number in points) {
                    if (point >= value) {
                        value = point;
                    }
                }
            }
            return value;
        }
        ]]></mx:Script>
</mx:Canvas>
