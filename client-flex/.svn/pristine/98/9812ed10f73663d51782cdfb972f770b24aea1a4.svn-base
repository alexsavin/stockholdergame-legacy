<?xml version="1.0"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
         xmlns:list="com.stockholdergame.client.ui.components.list.*"
         xmlns:c="com.stockholdergame.client.ui.components.*"
         implements="com.stockholdergame.client.ui.components.page.IRefreshablePage"
         styleName="page" show="refreshData()">

    <mx:Metadata>
        [Event(name="refreshPageData", type="com.stockholdergame.client.ui.events.BusinessEvent")]
        [Event(name="joinToGame", type="com.stockholdergame.client.ui.events.BusinessEvent")]
        [Event(name="cancelGame", type="com.stockholdergame.client.ui.events.BusinessEvent")]
        [Event(name="showInviteUserDialog", type="com.stockholdergame.client.ui.events.BusinessEvent")]
        [Event(name="changeInvitationStatus", type="com.stockholdergame.client.ui.events.BusinessEvent")]
        [ResourceBundle("common")]
    </mx:Metadata>

    <mx:Script><![CDATA[
        import com.stockholdergame.client.model.dto.game.GameFilterDto;
        import com.stockholdergame.client.model.dto.game.lite.GamesList;
        import com.stockholdergame.client.ui.components.classes.GameFilterData;
        import com.stockholdergame.client.ui.components.list.PaginationBar;
        import com.stockholdergame.client.ui.components.list.events.PaginationEvent;
        import com.stockholdergame.client.ui.components.list.listClasses.PaginationData;
        import com.stockholdergame.client.ui.events.BusinessActions;
        import com.stockholdergame.client.ui.events.BusinessEvent;
        import com.stockholdergame.client.ui.events.GameFilterEvent;

        [Bindable]
        public var invitationsIncoming:GamesList;

        [Bindable]
        public var invitationsOutgoing:GamesList;

        public function refreshData():void {
            var gameFilter:GameFilterDto = createGameFilter(invitationsIncomingList != null
                    ? invitationsIncomingList.paginationData : PaginationBar.DEFAULT_PAGINATION_DATA, true);
            GameFilterData.mergeFilter(incomingInvitationFilterPanel.filterData, gameFilter);
            dispatchEvent(new BusinessEvent(BusinessActions.REFRESH_PAGE_DATA, gameFilter));
            gameFilter = createGameFilter(invitationsOutgoingList != null
                    ? invitationsOutgoingList.paginationData : PaginationBar.DEFAULT_PAGINATION_DATA, false);
            GameFilterData.mergeFilter(outgoingInvitationFilterPanel.filterData, gameFilter);
            dispatchEvent(new BusinessEvent(BusinessActions.REFRESH_PAGE_DATA, gameFilter));
        }

        public function redraw():void {
            if (invitationsIncomingList != null) {
                invitationsIncomingList.validateNow();
            }
            if (invitationsOutgoingList != null) {
                invitationsOutgoingList.validateNow();
            }
        }

        private function onInvitationsIncomingPageChanged(event:PaginationEvent):void {
            var gameFilter:GameFilterDto = createGameFilter(event.paginationData, true);
            GameFilterData.mergeFilter(incomingInvitationFilterPanel.filterData, gameFilter);
            dispatchEvent(new BusinessEvent(BusinessActions.REFRESH_PAGE_DATA, gameFilter));
        }

        private function onInvitationsOutgoingPageChanged(event:PaginationEvent):void {
            var gameFilter:GameFilterDto = createGameFilter(event.paginationData, false);
            GameFilterData.mergeFilter(outgoingInvitationFilterPanel.filterData, gameFilter);
            dispatchEvent(new BusinessEvent(BusinessActions.REFRESH_PAGE_DATA, gameFilter));
        }

        private function redispatchEvent(event:Event):void {
            event.stopImmediatePropagation();
            dispatchEvent(event);
        }

        private function onInvitationsPanelCreationComplete():void {
            invitationsIncomingList.addEventListener(BusinessActions.JOIN_TO_GAME, redispatchEvent);
            invitationsIncomingList.addEventListener(BusinessActions.SHOW_INVITE_USER_DIALOG, redispatchEvent);
            invitationsOutgoingList.addEventListener(BusinessActions.CANCEL_GAME, redispatchEvent);
            invitationsOutgoingList.addEventListener(BusinessActions.CHANGE_INVITATION_STATUS, redispatchEvent);
        }

        private static function createGameFilter(paginationData:PaginationData, incoming:Boolean):GameFilterDto {
            var gameFilter:GameFilterDto = new GameFilterDto();
            gameFilter.offset = paginationData.offset;
            gameFilter.maxResults = paginationData.limit;
            gameFilter.offer = false;
            gameFilter.initiator = !incoming;
            gameFilter.notInitiator = incoming;
            return gameFilter;
        }

        private function onIncomingInvitationsFilterApplied(event:GameFilterEvent):void {
            var gameFilter:GameFilterDto = createGameFilter(invitationsIncomingList != null
                    ? invitationsIncomingList.paginationData : PaginationBar.DEFAULT_PAGINATION_DATA, true);
            GameFilterData.mergeFilter(event.filterData, gameFilter);
            dispatchEvent(new BusinessEvent(BusinessActions.REFRESH_PAGE_DATA, gameFilter));
        }

        private function onOutgoingInvitationsFilterApplied(event:GameFilterEvent):void {
            var gameFilter:GameFilterDto = createGameFilter(invitationsOutgoingList != null
                    ? invitationsOutgoingList.paginationData : PaginationBar.DEFAULT_PAGINATION_DATA, false);
            GameFilterData.mergeFilter(event.filterData, gameFilter);
            dispatchEvent(new BusinessEvent(BusinessActions.REFRESH_PAGE_DATA, gameFilter));
        }

        public function clearData():void {
            invitationsIncoming = null;
            invitationsOutgoing = null;
        }
        ]]></mx:Script>

    <mx:HBox width="100%" styleName="pageHeaderBox" height="36">
        <mx:Label text="{resourceManager.getString('common', 'invitations.page.label')}" styleName="lightLargeBoldFont"/>
    </mx:HBox>

    <mx:Grid width="100%" height="100%" styleName="pageContentBox">
        <mx:GridRow width="100%">
            <mx:GridItem width="50%" height="36" styleName="normalBox" horizontalScrollPolicy="off" verticalScrollPolicy="off">
                <mx:Label text="{resourceManager.getString('common', 'invite.me.label')}" styleName="bigBoldFont"/>
                <mx:Spacer width="100%"/>
                <c:GameFilterPanel id="incomingInvitationFilterPanel" filterApplied="onIncomingInvitationsFilterApplied(event)" labelStyleName="smallFont"/>
            </mx:GridItem>
            <mx:GridItem width="50%" height="36" styleName="normalBox" horizontalScrollPolicy="off" verticalScrollPolicy="off">
                <mx:Label text="{resourceManager.getString('common', 'i.am.invite.label')}" styleName="bigBoldFont"/>
                <mx:Spacer width="100%"/>
                <c:GameFilterPanel id="outgoingInvitationFilterPanel" filterApplied="onOutgoingInvitationsFilterApplied(event)" labelStyleName="smallFont"/>
            </mx:GridItem>
        </mx:GridRow>
        <mx:GridRow width="100%" height="100%">
            <mx:GridItem height="100%">
                <list:GameList id="invitationsIncomingList" width="100%" height="100%"
                               totalItems="{invitationsIncoming.totalCount}" items="{invitationsIncoming.games}"
                               pageChanged="onInvitationsIncomingPageChanged(event)" itemsPerPage="3"/>
            </mx:GridItem>
            <mx:GridItem height="100%">
                <list:GameList id="invitationsOutgoingList" width="100%" height="100%"
                               totalItems="{invitationsOutgoing.totalCount}" items="{invitationsOutgoing.games}"
                               pageChanged="onInvitationsOutgoingPageChanged(event)" itemsPerPage="3"/>
            </mx:GridItem>
        </mx:GridRow>
    </mx:Grid>
</mx:VBox>
