<?xml version="1.0"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           verticalScrollPolicy="off" horizontalScrollPolicy="off">
    <mx:Script><![CDATA[
        import com.stockholdergame.client.model.dto.game.CompetitorDto;
        import com.stockholdergame.client.model.dto.game.CompetitorMoveDto;
        import com.stockholdergame.client.model.dto.game.GameDto;
        import com.stockholdergame.client.model.dto.game.MoveDto;
        import com.stockholdergame.client.model.dto.game.MoveStepDto;
        import com.stockholdergame.client.model.dto.game.SharePriceDto;
        import com.stockholdergame.client.model.dto.game.ShareQuantityDto;
        import com.stockholdergame.client.ui.components.chart.chartClasses.GameChartData;
        import com.stockholdergame.client.ui.components.chart.chartClasses.GameChartDataItem;
        import com.stockholdergame.client.ui.components.chart.chartClasses.SharePriceChartData;
        import com.stockholdergame.client.util.StkMath;
        import com.stockholdergame.client.util.style.StkColorUtil;

        import mx.collections.ArrayCollection;
        import mx.controls.Label;
        import mx.core.UIComponent;
        import mx.events.ToolTipEvent;
        import mx.utils.ColorUtil;

        private static const textAndAxisColor:String = "#7E7A53";

        private var _game:GameDto;

        private var _hidePrices:Boolean = false;

        public var padding:int = 50;

        public var textGap:int = 4;

        public var legendItemHeight:int = 20;

        public var legendHorizontalPadding:int = 30;

        public var legendSize:int = 20;

        public var notchSize:int = 5;

        private var chartDrawn:Boolean = false;

        private var chartData:ArrayCollection;

        private var chartDataDict:Dictionary;

        private function generateChartData():void {
            chartData = new ArrayCollection();
            chartDataDict = new Dictionary();
            var moves:ArrayCollection = _game.moves;
            var prices:ArrayCollection = new ArrayCollection();
            var shareQuantities:Dictionary = new Dictionary();
            var cashValues:Dictionary = new Dictionary();
            for each (var move:MoveDto in moves) {
                var competitorMoves:ArrayCollection = move.competitorMoves;
                for each (var competitorMove:CompetitorMoveDto in competitorMoves) {
                    var chartDataPoint:GameChartData;
                    var moveNumber:int = move.moveNumber;
                    var moveOrder:int = competitorMove.moveOrder;
                    if (moveNumber == 0) {
                        var zeroStep:MoveStepDto = competitorMove.getStepByType(MoveStepDto.ZERO_STEP)[0];
                        if (zeroStep.sharePrices != null && zeroStep.sharePrices.length > 0) {
                            prices = zeroStep.sharePrices;
                        }
                        shareQuantities[moveOrder] = zeroStep.shareQuantities;
                        cashValues[moveOrder] = zeroStep.cashValue;
                        if (moveOrder == _game.competitorsQuantity) {
                            chartDataPoint = new GameChartData(moveNumber, moveOrder);
                            var points:Array = calculatePoints(prices, shareQuantities, cashValues);
                            chartDataPoint.competitorItems = createCompetitorMoveItems(points);
                            chartData.addItem(chartDataPoint);
                            chartDataDict[moveNumber + "." + moveOrder] = chartDataPoint;
                        }
                    } else {
                        var priceStep:MoveStepDto = competitorMove.getStepByType(MoveStepDto.PRICE_CHANGE_STEP)[0];
                        cashValues[moveOrder] = priceStep.cashValue;
                        prices = priceStep.sharePrices;
                        var lastSteps:ArrayCollection = competitorMove.getStepByType(MoveStepDto.LAST_BUY_SELL_STEP);
                        var lastStep:MoveStepDto;
                        if (lastSteps.length > 0) {
                            lastStep = lastSteps[0];
                            shareQuantities[moveOrder] = lastStep.shareQuantities;
                            cashValues[moveOrder] = lastStep.cashValue;
                        }
                        var compensationSteps:ArrayCollection = competitorMove.getStepByType(MoveStepDto.COMPENSATION_STEP);
                        if (compensationSteps.length > 0) {
                            cashValues[moveOrder] = compensationSteps[compensationSteps.length - 1].cashValue;
                        }
                        var bankruptingSteps:ArrayCollection = competitorMove.getStepByType(MoveStepDto.BANKRUPTING_STEP);
                        if (bankruptingSteps.length > 0) {
                            cashValues[moveOrder] = bankruptingSteps[0].cashValue;
                            shareQuantities[moveOrder] = bankruptingSteps[0].shareQuantities;
                        }
                        var repurchaseSteps:ArrayCollection = competitorMove.getStepByType(MoveStepDto.REPURCHASE_STEP);
                        if (repurchaseSteps.length > 0) {
                            cashValues[moveOrder] = repurchaseSteps[0].cashValue;
                            shareQuantities[moveOrder] = repurchaseSteps[0].shareQuantities;
                        }

                        chartDataPoint = new GameChartData(moveNumber, moveOrder);
                        points = calculatePoints(prices, shareQuantities, cashValues);
                        var pricePoints:ArrayCollection = calculatePricePoints(prices, competitorMove.previousCompetitorMove);
                        chartDataPoint.competitorItems = createCompetitorMoveItems(points);
                        chartDataPoint.competitorMove = competitorMove;
                        chartDataPoint.sharePriceItems = pricePoints;
                        chartData.addItem(chartDataPoint);
                        chartDataDict[moveNumber + "." + moveOrder] = chartDataPoint;
                    }
                }
            }
        }

        private static function calculatePricePoints(prices:ArrayCollection, previousCompetitorMove:CompetitorMoveDto):ArrayCollection {
            if (previousCompetitorMove == null) {
                return null;
            }
            var previousMovePrices:ArrayCollection = MoveStepDto(
                    previousCompetitorMove.getStepByType(previousCompetitorMove.moveNumber == 0
                            ? MoveStepDto.ZERO_STEP : MoveStepDto.PRICE_CHANGE_STEP).getItemAt(0)).sharePrices;
            var sharePriceItems:ArrayCollection = new ArrayCollection();
            for each (var sharePrice:SharePriceDto in prices) {
                var sharePriceChartData:SharePriceChartData = new SharePriceChartData();
                sharePriceChartData.newPrice = sharePrice.price;
                for each (var prevPrice:SharePriceDto in previousMovePrices) {
                    if (prevPrice.id == sharePrice.id) {
                        sharePriceChartData.oldPrice = prevPrice.price;
                        sharePriceChartData.color = sharePrice.color;
                    }
                }
                sharePriceItems.addItem(sharePriceChartData);
            }
            return sharePriceItems;
        }

        private function calculatePoints(prices:ArrayCollection, shareQuantities:Dictionary, cashValues:Dictionary):Array {
            var points:ArrayCollection = new ArrayCollection();
            for (var moveOrder:int = 1; moveOrder <= _game.competitorsQuantity; moveOrder++) {
                var point:Number = 0;
                point = point + cashValues[moveOrder];
                var shares:ArrayCollection = shareQuantities[moveOrder];
                for each (var shareQuantity:ShareQuantityDto in shares) {
                    for each (var sharePrice:SharePriceDto in prices) {
                        if (sharePrice.id == shareQuantity.id) {
                            point = point + (shareQuantity.quantity * sharePrice.price);
                        }
                    }
                }
                points.addItem(point);
            }
            return points.toArray();
        }


        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            if (!chartDrawn && _game != null) {
                drawChart();
            }
        }

        private function drawChart():void {
            this.graphics.clear();
            this.removeAllChildren();

            var componentHeight:int = this.height;
            var componentWidth:int = this.width;
            var actualHeight:Number = componentHeight - (2 * padding);
            var actualWidth:Number = componentWidth - (2 * padding);

            var maxTotalValue:Number = getMaxValue(chartData);
            var minTotalValue:Number = getMinValue(chartData);
            var verticalScale:Number = actualHeight / (maxTotalValue - minTotalValue);
            var horizontalStep:Number = actualWidth / (_game.movesQuantity * _game.competitorsQuantity);

            var verticalSharePriceScale:Number = actualHeight / 25;
            var sharePriceStickWidth:Number = horizontalStep / 4 - 1;
            if (sharePriceStickWidth < 4) {
                sharePriceStickWidth = 4;
            }

            // axis
            this.graphics.lineStyle(2, StyleManager.getColorName(textAndAxisColor));
            this.graphics.moveTo(padding, padding);
            this.graphics.lineTo(padding, actualHeight + padding);

            this.graphics.moveTo(padding, (maxTotalValue * verticalScale) + padding);
            this.graphics.lineTo(actualWidth + padding, (maxTotalValue * verticalScale) + padding);

            this.graphics.moveTo(padding + actualWidth, padding);
            this.graphics.lineTo(actualWidth + padding, actualHeight + padding);

            var scaleOrder:int = Math.floor(StkMath.log10(maxTotalValue));
            var absoluteScaleStep:int = Math.pow(10, scaleOrder);
            var yScaleStep:int = Math.round(absoluteScaleStep * actualHeight / maxTotalValue);
            if (yScaleStep > padding) {
                yScaleStep = yScaleStep / 2;
                absoluteScaleStep = absoluteScaleStep / 2;
                if (yScaleStep > (padding * 2)) {
                    yScaleStep = yScaleStep / 2;
                    absoluteScaleStep = absoluteScaleStep / 2;
                }
            }
            var scaleStepY:Number = 0;
            var o:int = 0;
            while (scaleStepY <= actualHeight) {
                this.graphics.moveTo(padding, actualHeight + padding - scaleStepY);
                this.graphics.lineTo(padding - notchSize, actualHeight + padding - scaleStepY);

                label = new Label();
                label.text = "" + (absoluteScaleStep * o);
                label.regenerateStyleCache(false);
                label.setStyle("color", StyleManager.getColorName(textAndAxisColor));
                var measure:TextLineMetrics = label.measureText(label.text);
                label.x = padding - measure.width - notchSize - textGap;
                label.y = actualHeight + padding - scaleStepY;
                addChild(label);

                scaleStepY = scaleStepY + yScaleStep;
                o++;
            }

            if (!_hidePrices) {
                var priceScaleStepY:Number = 0;
                var q:int = 0;
                while (priceScaleStepY <= actualHeight) {
                    this.graphics.moveTo(padding + actualWidth, actualHeight + padding - priceScaleStepY);
                    this.graphics.lineTo(padding + actualWidth + notchSize, actualHeight + padding - priceScaleStepY);

                    if (q % 5 == 0) {
                        label = new Label();
                        label.text = "" + (q * 10);
                        label.regenerateStyleCache(false);
                        label.setStyle("color", StyleManager.getColorName(textAndAxisColor));
                        measure = label.measureText(label.text);
                        label.x = actualWidth + padding + notchSize + textGap;
                        label.y = actualHeight + padding - priceScaleStepY - measure.height;
                        addChild(label);
                    }

                    priceScaleStepY = priceScaleStepY + verticalSharePriceScale;
                    q++;
                }
            }

            // moves sections
            for (var n:int = 0; n < _game.movesQuantity; n++) {
                for (var j:int = 0; j < _game.competitorsQuantity; j++) {
                    var x1:Number = (n * _game.competitorsQuantity * horizontalStep) + (j * horizontalStep) + padding;
                    var rect:Shape = new Shape();
                    rect.graphics.lineStyle(0, 0, 0.0);
                    rect.graphics.beginFill(StyleManager.getColorName(StkColorUtil.moveOrderBackgroundColorMapping[j]), 0.4);
                    rect.graphics.drawRect(0, 0, horizontalStep, (maxTotalValue * verticalScale));
                    rect.graphics.endFill();
                    var c:UIComponent = new UIComponent();
                    c.x = x1;
                    c.y = padding;
                    c.toolTip = "tool tip";
                    (function ():void {
                        const currentMove:String = "" + (n + 1) + "." + (j + 1);
                        c.addEventListener(ToolTipEvent.TOOL_TIP_CREATE, function (event:ToolTipEvent):void {
                            var gameChartToolTip:GameChartToolTip = new GameChartToolTip();
                            gameChartToolTip.chartDataPoint = chartDataDict[currentMove];
                            event.toolTip = gameChartToolTip;
                        });
                    })();
                    c.addChild(rect);
                    this.addChild(c);
                }
            }

            // legend
            var label:Label;
            var k:int = 0;
            var legendLabelPointX:Number = 0;
            for each (var description:String in createUserNamesList()) {
                this.graphics.lineStyle(2, StyleManager.getColorName(StkColorUtil.moveOrderColorMapping[k]));
                this.graphics.moveTo(legendLabelPointX + padding, componentHeight - (padding / 4));
                this.graphics.lineTo(legendLabelPointX + padding + legendSize, componentHeight - (padding / 4));

                label = new Label();
                label.text = description;
                label.regenerateStyleCache(false);
                label.setStyle("color", StyleManager.getColorName("blue"));
                label.setStyle("fontWeight", "bold");
                measure = label.measureText(label.text);
                label.x = legendLabelPointX + padding + legendSize + textGap;
                label.y = componentHeight - (padding / 4) - (measure.height * (2 / 3));
                legendLabelPointX = label.x + measure.width;
                addChild(label);
                k++;
            }

            if (!_hidePrices) {
                // prices
                var s:int = 0;
                for each (var chartPointData1:GameChartData in chartData) {
                    if (chartPointData1.moveNumber == 0) {
                        continue;
                    }
                    var x2:int = (s * horizontalStep) + padding;
                    var sharePrices:ArrayCollection = chartPointData1.sharePriceItems;
                    var p:int = 0;
                    for each (var sharePriceChartData:SharePriceChartData in sharePrices) {
                        var newPrice:int = sharePriceChartData.newPrice;
                        var oldPrice:int = sharePriceChartData.oldPrice;
                        var stickHeight:Number = ((newPrice > oldPrice ? newPrice - oldPrice : oldPrice - newPrice) / 10) * verticalSharePriceScale;
                        if (stickHeight == 0) {
                            stickHeight = 2;
                        }
                        var stickX:Number = x2 + (p * sharePriceStickWidth) + p;
                        var stickY:Number = newPrice > oldPrice
                                ? actualHeight + padding - ((newPrice / 10) * verticalSharePriceScale)
                                : actualHeight + padding - ((oldPrice / 10) * verticalSharePriceScale);
                        this.graphics.lineStyle(1, StyleManager.getColorName(sharePriceChartData.color));
                        this.graphics.beginFill(ColorUtil.adjustBrightness2(StyleManager.getColorName(sharePriceChartData.color),
                                newPrice > oldPrice ? 80 : newPrice == oldPrice ? 0 : -20));
                        this.graphics.drawRect(stickX, stickY, sharePriceStickWidth, stickHeight);
                        this.graphics.endFill();
                        p++;
                    }
                    s++;
                }
            }

            // total funds lines
            for (var m:int = 1; m <= _game.competitorsQuantity; m++) {
                var i:int = 0;
                for each (var chartPointData:GameChartData in chartData) {
                    for each (var item:GameChartDataItem in chartPointData.competitorItems) {
                        if (item.moveOrder == m) {
                            var x:Number = (i * horizontalStep) + padding;
                            var y:Number = (maxTotalValue * verticalScale) - (item.totalFunds * verticalScale) + padding;
                            if (chartPointData.moveNumber == 0) {
                                this.graphics.lineStyle(2,
                                        StyleManager.getColorName(StkColorUtil.moveOrderColorMapping[item.moveOrder - 1]));
                                this.graphics.moveTo(x, y);
                            } else {
                                this.graphics.lineTo(x, y);

                                label = new Label();
                                label.text = chartPointData.moveNumber + "." + chartPointData.moveOrder;
                                label.regenerateStyleCache(false);
                                measure = label.measureText(label.text);
                                label.x = x - (horizontalStep / 2) - (measure.width / 2);
                                label.y = actualHeight + padding + textGap;
                                addChild(label);
                            }
                        }
                    }
                    i++;
                }
            }

            chartDrawn = true;
        }

        private function createUserNamesList():ArrayCollection {
            var userNames:ArrayCollection = new ArrayCollection();
            var competitors:ArrayCollection = _game.competitors;
            for each (var competitor:CompetitorDto in competitors) {
                userNames.addItem(competitor.userName);
            }
            return userNames;
        }

        private static function getMinValue(chartData:ArrayCollection):Number {
            var value:Number = 0;
            for each (var gameChartData:GameChartData in chartData) {
                var competitorItems:ArrayCollection = gameChartData.competitorItems;
                for each (var item:GameChartDataItem in competitorItems) {
                    if (item.totalFunds <= value) {
                        value = item.totalFunds;
                    }
                }
            }
            return value;
        }

        private static function getMaxValue(chartData:ArrayCollection):Number {
            var value:Number = 0;
            for each (var gameChartData:GameChartData in chartData) {
                var competitorItems:ArrayCollection = gameChartData.competitorItems;
                for each (var item:GameChartDataItem in competitorItems) {
                    if (item.totalFunds >= value) {
                        value = item.totalFunds;
                    }
                }
            }
            return value;
        }

        private static function createCompetitorMoveItems(points:Array):ArrayCollection {
            var i:int = 1;
            var items:ArrayCollection = new ArrayCollection();
            for each (var value:Number in points) {
                var chartDataItem:GameChartDataItem = new GameChartDataItem(i);
                chartDataItem.totalFunds = value;
                items.addItem(chartDataItem);
                i++;
            }
            return items;
        }

        [Bindable]
        public function get game():GameDto {
            return _game;
        }

        public function set game(value:GameDto):void {
            _game = value;
            if (_game != null) {
                generateChartData();
            }
        }

        [Bindable]
        public function get hidePrices():Boolean {
            return _hidePrices;
        }

        public function set hidePrices(value:Boolean):void {
            var oldValue:Boolean = _hidePrices;
            _hidePrices = value;
            if (oldValue != _hidePrices) {
                chartDrawn = false;
            }
        }
        ]]></mx:Script>
</mx:Canvas>
